<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Subtext.Framework</name>
    </assembly>
    <members>
        <member name="T:Subtext.Framework.Components.ArchiveCount">
            <summary>
            Summary description for ArchiveCount.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ArchiveCountCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.ArchiveCount">ArchiveCount</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.#ctor(Subtext.Framework.Components.ArchiveCountCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.#ctor(Subtext.Framework.Components.ArchiveCount[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.ArchiveCount">ArchiveCount</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.ArchiveCount">ArchiveCount</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.AddRange(Subtext.Framework.Components.ArchiveCount[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.ArchiveCount">ArchiveCount</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.ArchiveCount">ArchiveCount</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.AddRange(Subtext.Framework.Components.ArchiveCountCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.Contains(Subtext.Framework.Components.ArchiveCount)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.CopyTo(Subtext.Framework.Components.ArchiveCount[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.IndexOf(Subtext.Framework.Components.ArchiveCount)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.ArchiveCountCollection.ArchiveCountCollectionEnumerator">ArchiveCountCollectionEnumerator</see> for the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.ArchiveCountCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ArchiveCountCollection.ArchiveCountCollectionEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.ArchiveCountCollectionEnumerator.#ctor(Subtext.Framework.Components.ArchiveCountCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ArchiveCountCollection.ArchiveCountCollectionEnumerator">ArchiveCountCollectionEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.ArchiveCountCollection">ArchiveCountCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.ArchiveCountCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ArchiveCountCollection.ArchiveCountCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.ArchiveCountCollection.ArchiveCountCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.BlogUser">
            <summary>
            Summary description for BlogUser.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.CategoryEntry">
            <summary>
            Summary description for CategoryEntry.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.Entry">
            <summary>
            Summary description for Entry.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.IBlogIdentifier">
            <summary>
            Summary description for IBlogID.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.Entry.HasTitleUrl">
            <summary>
            Gets a value indicating whether this entry 
            has an actual Title URL that's different from 
            the Link (meaning the user overrode the title 
            url).
            </summary>
            <value>
            	<c>true</c> if [has title URL]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Subtext.Framework.Components.Entry.TitleUrl">
            <summary>
            Gets or sets the URL the Title of an entry will 
            link to.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Components.Entry.CommentingClosed">
            <summary>
            True if comments have been closed. Otherwise false.  Comments are closed 
            after a certain number of days.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.Entry">Entry</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.#ctor(Subtext.Framework.Components.Entry[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.Entry">Entry</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.Entry">Entry</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.AddRange(Subtext.Framework.Components.Entry[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.Entry">Entry</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.Entry">Entry</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.AddRange(Subtext.Framework.Components.EntryCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.Contains(Subtext.Framework.Components.Entry)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.CopyTo(Subtext.Framework.Components.Entry[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.IndexOf(Subtext.Framework.Components.Entry)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.EntryCollection.BlogPostDayEnumerator">BlogPostDayEnumerator</see> for the <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.EntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryCollection.BlogPostDayEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.BlogPostDayEnumerator.#ctor(Subtext.Framework.Components.EntryCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryCollection.BlogPostDayEnumerator">BlogPostDayEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.EntryCollection">EntryCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.BlogPostDayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryCollection.BlogPostDayEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.EntryCollection.BlogPostDayEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryDay">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.Entry">Entry</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryDay">EntryDay</see> class.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryDayCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.EntryDay">EntryDay</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.#ctor(Subtext.Framework.Components.EntryDayCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.#ctor(Subtext.Framework.Components.EntryDay[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.EntryDay">EntryDay</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.EntryDay">EntryDay</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.AddRange(Subtext.Framework.Components.EntryDay[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.EntryDay">EntryDay</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.EntryDay">EntryDay</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.AddRange(Subtext.Framework.Components.EntryDayCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.Contains(Subtext.Framework.Components.EntryDay)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.CopyTo(Subtext.Framework.Components.EntryDay[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.IndexOf(Subtext.Framework.Components.EntryDay)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.EntryDayCollection.BlogPostDayCollectionEnumerator">BlogPostDayCollectionEnumerator</see> for the <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.EntryDayCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryDayCollection.BlogPostDayCollectionEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.BlogPostDayCollectionEnumerator.#ctor(Subtext.Framework.Components.EntryDayCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryDayCollection.BlogPostDayCollectionEnumerator">BlogPostDayCollectionEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.EntryDayCollection">EntryDayCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.BlogPostDayCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryDayCollection.BlogPostDayCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.EntryDayCollection.BlogPostDayCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryStatsView">
            <summary>
            Summary description for EntryStatsView.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryView">
            <summary>
            Summary description for EntryView.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryViewCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.EntryView">EntryView</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.#ctor(Subtext.Framework.Components.EntryViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.#ctor(Subtext.Framework.Components.EntryView[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.EntryView">EntryView</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.EntryView">EntryView</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.AddRange(Subtext.Framework.Components.EntryView[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.EntryView">EntryView</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.EntryView">EntryView</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.AddRange(Subtext.Framework.Components.EntryViewCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.Contains(Subtext.Framework.Components.EntryView)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.CopyTo(Subtext.Framework.Components.EntryView[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.IndexOf(Subtext.Framework.Components.EntryView)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.EntryViewCollection.EntryViewCollectionEnumerator">EntryViewCollectionEnumerator</see> for the <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.EntryViewCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.EntryViewCollection.EntryViewCollectionEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.EntryViewCollectionEnumerator.#ctor(Subtext.Framework.Components.EntryViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.EntryViewCollection.EntryViewCollectionEnumerator">EntryViewCollectionEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.EntryViewCollection">EntryViewCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.EntryViewCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.EntryViewCollection.EntryViewCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.EntryViewCollection.EntryViewCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.Image">
            <summary>
            Summary description for Link.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ImageCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.Image">Image</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.#ctor(Subtext.Framework.Components.ImageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.#ctor(Subtext.Framework.Components.Image[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.Image">Image</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.Image">Image</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.AddRange(Subtext.Framework.Components.Image[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.Image">Image</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.Image">Image</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.AddRange(Subtext.Framework.Components.ImageCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.Contains(Subtext.Framework.Components.Image)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.CopyTo(Subtext.Framework.Components.Image[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.IndexOf(Subtext.Framework.Components.Image)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.ImageCollection.ImageCollectionEnumerator">ImageCollectionEnumerator</see> for the <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.ImageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ImageCollection.ImageCollectionEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.ImageCollectionEnumerator.#ctor(Subtext.Framework.Components.ImageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ImageCollection.ImageCollectionEnumerator">ImageCollectionEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.ImageCollection">ImageCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.ImageCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ImageCollection.ImageCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.ImageCollection.ImageCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.IMail">
            <summary>
            Summary description for IMail.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.IPagedResults">
            <summary>
            Summary description for IPagedResults.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.KeyWord">
            <summary>
            Summary description for KeyWord.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.KeyWord.Word">
            <summary>
            The word or words to look for. Could also be short hand. ie, ScottW would end up <a href = "http://scottwater.com/blog">Scott Watermasysk</a>
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.KeyWord.Text">
            <summary>
            The text value of an anchor tag: <a href="#">TEXT</a>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.KeyWordCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.KeyWord">KeyWord</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.#ctor(Subtext.Framework.Components.KeyWordCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.#ctor(Subtext.Framework.Components.KeyWord[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.KeyWord">KeyWord</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.KeyWord">KeyWord</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.AddRange(Subtext.Framework.Components.KeyWord[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.KeyWord">KeyWord</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.KeyWord">KeyWord</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.AddRange(Subtext.Framework.Components.KeyWordCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.Contains(Subtext.Framework.Components.KeyWord)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.CopyTo(Subtext.Framework.Components.KeyWord[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.IndexOf(Subtext.Framework.Components.KeyWord)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.KeyWordCollection.KeyWordCollectionEnumerator">KeyWordCollectionEnumerator</see> for the <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.KeyWordCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.KeyWordCollection.KeyWordCollectionEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.KeyWordCollectionEnumerator.#ctor(Subtext.Framework.Components.KeyWordCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.KeyWordCollection.KeyWordCollectionEnumerator">KeyWordCollectionEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.KeyWordCollection">KeyWordCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.KeyWordCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.KeyWordCollection.KeyWordCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.KeyWordCollection.KeyWordCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.Link">
            <summary>
            Summary description for Link.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.LinkCategory">
            <summary>
            Summary description for LinkCategory.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.LinkCategoryCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.LinkCategory">LinkCategory</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.#ctor(Subtext.Framework.Components.LinkCategoryCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.#ctor(Subtext.Framework.Components.LinkCategory[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.LinkCategory">LinkCategory</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.LinkCategory">LinkCategory</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.AddRange(Subtext.Framework.Components.LinkCategory[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.LinkCategory">LinkCategory</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.LinkCategory">LinkCategory</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.AddRange(Subtext.Framework.Components.LinkCategoryCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.Contains(Subtext.Framework.Components.LinkCategory)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.CopyTo(Subtext.Framework.Components.LinkCategory[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.IndexOf(Subtext.Framework.Components.LinkCategory)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.LinkCategoryCollection.LinkCategoryCollectionEnumerator">LinkCategoryCollectionEnumerator</see> for the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.LinkCategoryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.LinkCategoryCollection.LinkCategoryCollectionEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.LinkCategoryCollectionEnumerator.#ctor(Subtext.Framework.Components.LinkCategoryCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCategoryCollection.LinkCategoryCollectionEnumerator">LinkCategoryCollectionEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.LinkCategoryCollection">LinkCategoryCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.LinkCategoryCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCategoryCollection.LinkCategoryCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.LinkCategoryCollection.LinkCategoryCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.LinkCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.Link">Link</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.#ctor(Subtext.Framework.Components.LinkCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.#ctor(Subtext.Framework.Components.Link[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.Link">Link</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.Link">Link</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.AddRange(Subtext.Framework.Components.Link[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.Link">Link</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.Link">Link</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.AddRange(Subtext.Framework.Components.LinkCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.Contains(Subtext.Framework.Components.Link)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.CopyTo(Subtext.Framework.Components.Link[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.IndexOf(Subtext.Framework.Components.Link)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.LinkCollection.LinkCollectionEnumerator">LinkCollectionEnumerator</see> for the <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.LinkCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.LinkCollection.LinkCollectionEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.LinkCollectionEnumerator.#ctor(Subtext.Framework.Components.LinkCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.LinkCollection.LinkCollectionEnumerator">LinkCollectionEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.LinkCollection">LinkCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.LinkCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.LinkCollection.LinkCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.LinkCollection.LinkCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PagedEntryCollection">
            <summary>
            Summary description for PagedEntryCollection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PagedKeyWordCollection">
            <summary>
            Summary description for PagedEntryCollection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PagedLinkCollection">
            <summary>
            Summary description for PagedLinkCollection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PagedReferrerCollection">
            <summary>
            Summary description for PagedReferrerCollection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ReferrerCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.Referrer">Referrer</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.#ctor(Subtext.Framework.Components.Referrer[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.Referrer">Referrer</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.Referrer">Referrer</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.AddRange(Subtext.Framework.Components.Referrer[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.Referrer">Referrer</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.Referrer">Referrer</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.AddRange(Subtext.Framework.Components.ReferrerCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.Contains(Subtext.Framework.Components.Referrer)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.CopyTo(Subtext.Framework.Components.Referrer[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.IndexOf(Subtext.Framework.Components.Referrer)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.ReferrerCollection.BlogPostDayEnumerator">BlogPostDayEnumerator</see> for the <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.ReferrerCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ReferrerCollection.BlogPostDayEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.BlogPostDayEnumerator.#ctor(Subtext.Framework.Components.ReferrerCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ReferrerCollection.BlogPostDayEnumerator">BlogPostDayEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.ReferrerCollection">ReferrerCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.BlogPostDayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ReferrerCollection.BlogPostDayEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.ReferrerCollection.BlogPostDayEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PagedViewStatCollection">
            <summary>
            Summary description for PagedViewStatCollection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ViewStatCollection">
            <summary>
            Represents a collection of <see cref="T:Subtext.Framework.Components.ViewStat">ViewStat</see> Components.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> class.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.#ctor(Subtext.Framework.Components.ViewStat[])">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> class containing the specified array of <see cref="T:Subtext.Framework.Components.ViewStat">ViewStat</see> Components.
            </summary>
            <param name="value">An array of <see cref="T:Subtext.Framework.Components.ViewStat">ViewStat</see> Components with which to initialize the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.AddRange(Subtext.Framework.Components.ViewStat[])">
            <summary>
            Copies the elements of the specified <see cref="T:Subtext.Framework.Components.ViewStat">ViewStat</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:Subtext.Framework.Components.ViewStat">ViewStat</see> containing the Components to add to the collection.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.AddRange(Subtext.Framework.Components.ViewStatCollection)">
            <summary>
            Adds the contents of another <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> containing the Components to add to the collection. </param>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.Contains(Subtext.Framework.Components.ViewStat)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.CopyTo(Subtext.Framework.Components.ViewStat[],System.Int32)">
            <summary>
            Copies the collection Components to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.IndexOf(Subtext.Framework.Components.ViewStat)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> instance.
            </summary>
            <returns>An <see cref="T:Subtext.Framework.Components.ViewStatCollection.BlogPostDayEnumerator">BlogPostDayEnumerator</see> for the <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> instance.</returns>
        </member>
        <member name="P:Subtext.Framework.Components.ViewStatCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> at the specified index in the collection.
            <para>
            In C#, this property is the indexer for the <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ViewStatCollection.BlogPostDayEnumerator">
            <summary>
            Supports a simple iteration over a <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.BlogPostDayEnumerator.#ctor(Subtext.Framework.Components.ViewStatCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Subtext.Framework.Components.ViewStatCollection.BlogPostDayEnumerator">BlogPostDayEnumerator</see> class referencing the specified <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> object.
            </summary>
            <param name="mappings">The <see cref="T:Subtext.Framework.Components.ViewStatCollection">ViewStatCollection</see> to enumerate.</param>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.BlogPostDayEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns><b>true</b> if the enumerator was successfully advanced to the next element; <b>false</b> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Subtext.Framework.Components.ViewStatCollection.BlogPostDayEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:Subtext.Framework.Components.ViewStatCollection.BlogPostDayEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PageType">
            <summary>
            Summary description for PageType.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PostConfig">
            <summary>
            Summary description for PostConfig.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.PostType">
            <summary>
            Summary description for PageType.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.Referrer">
            <summary>
            Summary description for Referrer.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Components.ViewStat">
            <summary>
            Summary description for ViewStat.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Configuration.BlogConfig">
            <summary>
            Summary description for Configuration.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Configuration.BlogConfigurationSettings">
            <summary>
            Returns settings straight from Web.config.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Configuration.BlogConfigurationSettings.Instance">
            <summary>
            Returns a singleton instance of the settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Configuration.BlogConfigurationSettings.Instance(System.Web.HttpContext)">
            <summary>
            Returns a singleton instance of the settings.
            </summary>
            <param name="context">Context.</param>
            <returns></returns>
        </member>
        <member name="P:Subtext.Framework.Configuration.BlogConfigurationSettings.AllowImages">
            <summary>
            Gets or sets a value indicating whether or not to allow images.
            </summary>
            <value>
            	<c>true</c> if [allow images]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Subtext.Framework.Configuration.BlogConfigurationSettings.UseXHTML">
            <summary>
            Gets a value indicating whether or not to use XHTML.  This is 
            dependent on the DocTypeDeclaration chosen.
            </summary>
            <value>
            	<c>true</c> if using XHTML; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Subtext.Framework.Configuration.BlogConfigurationSettings.ItemCount">
            <summary>
            Gets or sets the default number of items to display 
            for syndication feeds.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Configuration.BlogConfigurationSettings.ServerTimeZone">
            <summary>
            Gets or sets the server time zone.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Configuration.BlogConfigurationSettings.DaysTillCommentsClose">
            <summary>
            Gets or sets the days till comments close on a post.  
            The count starts when a post is created.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Configuration.BlogConfigurationSettings.UseSyndicationCompression">
            <summary>
            Gets or sets a value indicating whether or not to use syndication compression.
            </summary>
            <value>
            	<c>true</c> if using syndication compression; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Subtext.Framework.Configuration.BlogConfigurationSettings.DocTypeDeclaration">
            <summary>
            Gets or sets the doc type declaration to use 
            at the top of each page.
            </summary>
            <value></value>
        </member>
        <member name="T:Subtext.Framework.Configuration.Config">
            <summary>
            Summary description for Config.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Configuration.Config.AddInitialBlog(System.String,System.String)">
            <summary>
            Adds the initial blog configuration.  This is a convenience method for 
            allowing a user with a freshly installed blog to immediately gain access 
            to the admin section to edit the blog.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">Password.</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Configuration.IConfig">
            <summary>
            Interface definition for Blog configuration classes.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Configuration.IConfig.GetConfig">
            <summary>
            Gets the blog configuration based on the current http context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Configuration.IConfig.GetConfig(System.Web.HttpContext)">
            <summary>
            Gets the configuration based on the specified <see cref="T:System.Web.HttpContext"/>. 
            Must be implemented by configuration handlers.
            </summary>
            <param name="context">Context.</param>
            <returns></returns>
        </member>
        <member name="P:Subtext.Framework.Configuration.IConfig.BlogID">
            <summary>
            Gets or sets the blog ID.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Configuration.IConfig.CacheTime">
            <summary>
            Gets or sets the cache time.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Configuration.IConfig.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Configuration.IConfig.Application">
            <summary>
            Gets or sets the application.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Configuration.IConfig.ImageDirectory">
            <summary>
            Gets or sets the image directory.
            </summary>
            <value></value>
        </member>
        <member name="T:Subtext.Framework.Configuration.SkinConfig">
            <summary>
            Summary description for SkinConfig.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Configuration.Tracking">
            <summary>
            Summary description for Tracking.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Data.DataDTOProvider">
            <summary>
            Summary description for DataDTOProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Data.IDTOProvider">
            <summary>
            Summary description for IDTOProvider.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Data.IDTOProvider.AddInitialBlogConfiguration(System.String,System.String)">
            <summary>
            Adds the initial blog configuration.  This is a convenience method for 
            allowing a user with a freshly installed blog to immediately gain access 
            to the admin section to edit the blog.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">Password.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Data.IDTOProvider.UpdateConfigData(Subtext.Framework.Configuration.BlogConfig)">
            <summary>
            Updates the specified blog configuration.
            </summary>
            <param name="config">Config.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Data.IDTOProvider.GetConfig(System.String,System.String)">
            <summary>
            Gets the config.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="application">Application.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Data.IDTOProvider.GetConfig(System.Int32)">
            <summary>
            Gets the config. This has been depracated
            </summary>
            <param name="BlogID">Blog ID.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Data.DataDTOProvider.AddInitialBlogConfiguration(System.String,System.String)">
            <summary>
            Adds the initial blog configuration.  This is a convenience method for 
            allowing a user with a freshly installed blog to immediately gain access 
            to the admin section to edit the blog.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">Password.</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Data.DataHelper">
            <summary>
            Contains helper methods for getting blog entries from the database 
            into objects such as <see cref="T:Subtext.Framework.Components.EntryDayCollection"/> and <see cref="T:Subtext.Framework.Components.EntryCollection"/>.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Data.DataHelper.LoadSingleCategoryEntry(System.Data.IDataReader)">
            <summary>
            Returns a single CategoryEntry from a DataReader. Expects the data reader to have
            two sets of results. Should only be used to load 1 ENTRY
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Data.IDbProvider">
            <summary>
            Summary description for IBlogDataProvider.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Data.IDbProvider.AddInitialBlogConfiguration(System.String,System.String)">
            <summary>
            Adds the initial blog configuration.  This is a convenience method for 
            allowing a user with a freshly installed blog to immediately gain access 
            to the admin section to edit the blog.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">Password.</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Data.IProccessEntry">
            <summary>
            Summary description for IProccessEntry.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Data.SqlDataProvider">
            <summary>
            Summary description for WebSqlDAL.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Data.SqlDataProvider.AddInitialBlogConfiguration(System.String,System.String)">
            <summary>
            Adds the initial blog configuration.  This is a convenience method for 
            allowing a user with a freshly installed blog to immediately gain access 
            to the admin section to edit the blog.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">Password.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlDataProvider.UpdateConfigData(Subtext.Framework.Configuration.BlogConfig)">
            <summary>
            Updates the blog configuration in the SQL database 
            using the "blog_UpdateConfig" stored proc.
            </summary>
            <param name="config">Config.</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of SqlParameters tho be added to command</param>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters.
            </summary>
            <param name="commandParameters">array of SqlParameters to be assigned values</param>
            <param name="parameterValues">array of Components holding the values to be assigned</param>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the SqlCommand to be prepared</param>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.MakeInParam(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            Make input param.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <param name="Value">Param value.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.MakeOutParam(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Make input param.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.MakeParam(System.String,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Make stored procedure param.
            </summary>
            <param name="ParamName">Name of param.</param>
            <param name="DbType">Param type.</param>
            <param name="Size">Param size.</param>
            <param name="Direction">Parm direction.</param>
            <param name="Value">Param value.</param>
            <returns>New parameter.</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataTable dt = ExecuteDataTable(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a DataTable containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Subtext.Framework.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid SqlConnection, on which to execute this command</param>
            <param name="transaction">a valid SqlTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Subtext.Framework.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Subtext.Framework.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            this enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Subtext.Framework.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Subtext.Framework.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Subtext.Framework.Email.IMailProvider">
            <summary>
            Summary description for IMailProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Email.SystemMail">
            <summary>
            Default implementation of the IMailProvider
            </summary>
        </member>
        <member name="T:Subtext.Framework.Format.UrlFormats">
            <summary>
            Default Implemenation of UrlFormats
            </summary>
        </member>
        <member name="M:Subtext.Framework.Format.UrlFormats.DateFromUrl(System.String)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> instance parsed from the url.
            </summary>
            <param name="url">URL.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Format.UrlFormats.DateFromUrl(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> instance parsed from the url 
            at the startfrom position.
            </summary>
            <param name="url">URL.</param>
            <param name="startfrom">Startfrom.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Format.UrlFormats.GetBlogAppFromRequest(System.String,System.String)">
            <summary>
            Gets the blog app from request.
            </summary>
            <param name="path">Path.</param>
            <param name="app">App.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Subtext.Framework.Format.UrlFormats.GetUriReferrerSafe(System.Web.HttpRequest)" -->
        <member name="T:Subtext.Framework.Logging.Log">
            <summary>
            Provides logging for the Subtext framework. This class is typically instantiated as a <c>private static readonly</c> member
             of a class in order to handle logging inside of the class. This class is a specialized wrapper for the log4net framework.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.#ctor">
            <summary>
            Default constructor. Uses <see cref="T:System.Diagnostics.StackFrame"/> to discover the class it is being called from 
            and automatically establishes log name as the <see cref="P:System.Type.FullName"/> of the class type.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.#ctor(System.Type)">
            <summary>
            Instantiates a log using the <see cref="P:System.Type.FullName"/> of the suppled type of the class as the name.
            </summary>
            <param name="type"><see cref="T:System.Type"/> of the class to create a log for</param>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a message with the <c>ERROR</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Error(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a message with the <c>ERROR</c> level.
            </summary>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Error(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Info(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>INFO</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Info(System.Object)">
            <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>INFO</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
            will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
            To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Info(System.Object,System.Exception)"/> form 
            instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Debug(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>DEBUG</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>DEBUG</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Debug(System.Object)">
            <summary>
            Logs a message object with the <c>DEBUG</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>DEBUG</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
            will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
            To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Debug(System.Object,System.Exception)"/> form 
            instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Warn(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>WARN</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>WARN</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Warn(System.Object)">
            <summary>
            Logs a message object with the <c>WARN</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>WARN</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
            will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
            To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Warn(System.Object,System.Exception)"/> form 
            instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a message with the <c>WARN</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Warn(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a message with the <c>WARN</c> level.
            </summary>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Warn(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>FATAL</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>FATAL</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Fatal(System.Object)">
            <summary>
            Logs a message object with the <c>FATAL</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>FATAL</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
            will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
            To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Fatal(System.Object,System.Exception)"/> form 
            instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Error(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>ERROR</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>ERROR</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.Error(System.Object)">
            <summary>
            Logs a message object with the <c>ERROR</c> level.
            </summary>
            <param name="message">The message object to log</param>
            <remarks>
            <para>
             This method first checks if this logger is <c>ERROR</c> enabled. If so, 
             it converts the message object (passed as parameter) to a string 
             by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. 
             It then proceeds to call all the registered appenders in this logger and also 
             higher in the hierarchy depending on the value of the additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this method 
            will print the name of the <see cref="T:System.Exception"/> but no stack trace. 
            To print a stack trace use the <see cref="M:Subtext.Framework.Logging.Log.Error(System.Object,System.Exception)"/> form 
            instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a message with the <c>INFO</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Info(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a message with the <c>INFO</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Info(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a message with the <c>FATAL</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Fatal(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a message with the <c>FATAL</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Fatal(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a message with the <c>DEBUG</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Debug(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:Subtext.Framework.Logging.Log.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a message with the <c>DEBUG</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items</param>
            <param name="args">An <see cref="T:System.Array"/> containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. 
            See <see cref="M:System.String.Format(System.String,System.Object)"/> for details of the syntax 
            of the format string and the behavior of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the log event. 
            To pass an <see cref="T:System.Exception"/> use
            one of the <see cref="M:Subtext.Framework.Logging.Log.Debug(System.Object)"/> methods instead.
            </para>
            </remarks>
        </member>
        <member name="P:Subtext.Framework.Logging.Log.IsErrorEnabled">
            <summary>
            Checks if the log is enabled for the <c>ERROR</c> level.
            </summary>
            <value>
            <c>true</c> if this log is enabled for the <c>ERROR</c> events, <c>false</c> otherwise
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of disabled log debug statements.
            </para>
            </remarks>
        </member>
        <member name="P:Subtext.Framework.Logging.Log.IsFatalEnabled">
            <summary>
            Checks if the log is enabled for the <c>FATAL</c> level.
            </summary>
            <value>
            <c>true</c> if this log is enabled for the <c>FATAL</c> events, <c>false</c> otherwise
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of disabled log debug statements.
            </para>
            </remarks>
        </member>
        <member name="P:Subtext.Framework.Logging.Log.IsWarnEnabled">
            <summary>
            Checks if the log is enabled for the <c>WARN</c> level.
            </summary>
            <value>
            <c>true</c> if this log is enabled for the <c>WARN</c> events, <c>false</c> otherwise
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of disabled log debug statements.
            </para>
            </remarks>
        </member>
        <member name="P:Subtext.Framework.Logging.Log.IsInfoEnabled">
            <summary>
            Checks if the log is enabled for the <c>INFO</c> level.
            </summary>
            <value>
            <c>true</c> if this log is enabled for the <c>INFO</c> events, <c>false</c> otherwise
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of disabled log debug statements.
            </para>
            </remarks>
        </member>
        <member name="P:Subtext.Framework.Logging.Log.IsDebugEnabled">
            <summary>
            Checks if the log is enabled for the <c>DEBUG</c> level.
            </summary>
            <value>
            <c>true</c> if this log is enabled for the <c>DEBUG</c> events, <c>false</c> otherwise
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of disabled log debug statements.
            </para>
            </remarks>
        </member>
        <member name="T:Subtext.Framework.Providers.BaseProvider">
            <summary>
            Abstract base class for all providers.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Providers.BaseProvider.Instance">
            <summary>
            Returns an instance of this provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Providers.BaseProvider.SaveCache(System.String,System.Object)">
            <summary>
            Saves the specified object into the <see cref="T:Subtext.Framework.Util.BlogCache"/> 
            using the current <see cref="T:System.Web.HttpContext"/>.
            </summary>
            <remarks>
            The object is saved with a cache dependency on its assembly.
            </remarks>
            <param name="cacheKey">Cache key.</param>
            <param name="obj">Obj.</param>
        </member>
        <member name="M:Subtext.Framework.Providers.BaseProvider.SaveCache(System.String,System.Object,System.Web.HttpContext)">
            <summary>
            Saves the specified object into the <see cref="T:Subtext.Framework.Util.BlogCache"/> 
            using the specified <see cref="T:System.Web.HttpContext"/>.
            </summary>
            <remarks>
            The object is saved with a cache dependency on its assembly.
            </remarks>
            <param name="cacheKey">Cache key.</param>
            <param name="obj">Obj.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:Subtext.Framework.Providers.BlogProviders">
            <summary>
            Summary description for BlogProviders.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.ConfigProvider">
            <summary>
            ConfigProvider loads the Singleton Instance of IConfig
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.ConfigProviderConfiguration">
            <summary>
            Summary description for ConfigProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.DbProvider">
            <summary>
            ConfigProvider loads the Singleton Instance of IDbProvider
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.DbProviderConfiguration">
            <summary>
            Summary description for DbProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.DTOProvider">
            <summary>
            Summary description for DTOProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.DTOProviderConfiguration">
            <summary>
            Summary description for DTOProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.EmailProvider">
            <summary>
            Summary description for EmailProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.EmailProviderConfiguration">
            <summary>
            Summary description for EmailProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.IBlogProvider">
            <summary>
            Summary description for IBlogProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.UrlFormatProvider">
            <summary>
            Summary description for UrlFormatProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Providers.UrlFormatProviderConfiguration">
            <summary>
            Summary description for UrlFormatProvider.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Syndication.BaseAtomWriter">
            <summary>
            Generates RSS
            </summary>
        </member>
        <member name="T:Subtext.Framework.Syndication.BaseSyndicationWriter">
            <summary>
            Summary description for BaseSyndicationWriter.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Syndication.BaseRssWriter">
            <summary>
            Summary description for BaseRssWriter.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Syndication.BaseRssWriter.SetNamespaces">
            <summary>
            Sets the namespaces used within the RSS feed.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Syndication.BaseSyndicationHandler">
            <summary>
            Summary description for BaseSyndicationHandler.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Syndication.BaseSyndicationHandler.IsLocalCacheOK">
            <summary>
            Returns whether or not the local cache is OK.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Syndication.BaseSyndicationHandler.IsHttpCacheOK">
            <summary>
            Returns whether or not the http cache is OK.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Syndication.BaseSyndicationHandler.Send304">
            <summary>
            Send the HTTP status code 304 to the response this instance.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Syndication.BaseSyndicationHandler.WriteFeed">
            <summary>
            Writes the feed to the response.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Syndication.BaseSyndicationHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processs the request and sends the feed to the response.
            </summary>
            <param name="context">Context.</param>
        </member>
        <member name="P:Subtext.Framework.Syndication.BaseSyndicationHandler.LastModifiedHeader">
            <summary>
            Gets the last modified header.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Syndication.BaseSyndicationHandler.IsReusable">
            <summary>
            Gets a value indicating whether this handler is reusable.
            </summary>
            <value>
            	<c>true</c> if it is reusable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Subtext.Framework.Syndication.BaseSyndicationHandler.AcceptEncoding">
            <summary>
            Returns the "Accept-Encoding" value from the HTTP Request header. 
            This is a list of encodings that may be sent to the browser.
            </summary>
            <remarks>
            Specifically we're looking for gzip.
            </remarks>
            <value></value>
        </member>
        <member name="T:Subtext.Framework.Syndication.CachedFeed">
            <summary>
            The CachedFeed is a cacheable container for our rss feed(s). Instead of requesting the cache data, processing it,
            and creating an XML document on each request, we will store the actually Rss document as a cached string.
            
            Generally, it will be returned to the client by calling Response.Write(feed.Xml)
            </summary>
        </member>
        <member name="M:Subtext.Framework.Syndication.CachedFeed.IsCacheOK(System.String,System.String)">
            <summary>
            Checks to see if the Requesting client has the most recent version of the feed
            </summary>
            <param name="CurrentEtag">Etag header sent with Response (If-None-Match)</param>
            <param name="CurrentLastModifiedDate">LastModified Data header sent with Response (If-Modified-Since)</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Text.HtmlHelper">
            <summary>
            Static class used for parseing, formatting, and validating HTML.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Text.HtmlHelper.ConvertHtmlToXHtml(Subtext.Framework.Components.Entry@)">
            <summary>
            Converts the entry body into XHTML compliant text. 
            Returns false if it encounters a problem in doing so.
            </summary>
            <param name="entry">Entry.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.HtmlHelper.HasIllegalContent(System.String)">
            <summary>
            Tests the specified string looking for illegal characters 
            or html tags.
            </summary>
            <param name="s">S.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.HtmlHelper.EnableUrls(System.String)">
            <summary>
            Wraps an anchor tag around urls.
            </summary>
            <param name="text">Text.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Subtext.Framework.Text.HtmlHelper.SafeFormatWithUrl(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Subtext.Framework.Text.HtmlHelper.SafeFormat(System.String)" -->
        <member name="M:Subtext.Framework.Text.HtmlHelper.StripRTB(System.String,System.String)">
            <summary>
            Strips the RTB, whatever that is.
            </summary>
            <param name="text">Text.</param>
            <param name="host">Host.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.HtmlHelper.CheckForUrl(System.String)">
            <summary>
            Checks the text and prepends "http://" if it doesn't have it already.
            </summary>
            <param name="text">Text.</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Text.StringHelper">
            <summary>
            Static class with useful string manipulation methods.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Compares the strings and returns true if they are equal.
            </summary>
            <param name="source">Source.</param>
            <param name="compared">Compared.</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.AreEqualIgnoringCase(System.String,System.String)">
            <summary>
            Compares the strings and returns true if they are equal, ignoring case.
            </summary>
            <param name="source">Source.</param>
            <param name="compared">Compared.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.SplitUpperCase(System.String)">
            <summary>
            Parses a camel cased or pascal cased string and returns an array 
            of the words within the string.
            </summary>
            <example>
            The string "PascalCasing" will return an array with two 
            elements, "Pascal" and "Casing".
            </example>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.SplitUpperCaseToString(System.String)">
            <summary>
            Parses a camel cased or pascal cased string and returns a new 
            string with spaces between the words in the string.
            </summary>
            <example>
            The string "PascalCasing" will return an array with two 
            elements, "Pascal" and "Casing".
            </example>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.Left(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the left side of a string.
            </summary>
            <param name="str">Required. String expression from which the leftmost characters are returned.</param>
            <param name="length">Required. Integer greater than 0. Numeric expression 
            indicating how many characters to return. If 0, a zero-length string ("") 
            is returned. If greater than or equal to the number of characters in Str, 
            the entire string is returned. If str is null, this returns null.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
            <exception cref="T:System.NullReferenceException">Thrown if str is null.</exception>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.Right(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="str">Required. String expression from which the rightmost characters are returned.</param>
            <param name="length">Required. Integer greater than 0. Numeric expression 
            indicating how many characters to return. If 0, a zero-length string ("") 
            is returned. If greater than or equal to the number of characters in Str, 
            the entire string is returned. If str is null, this returns null.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
            <exception cref="T:System.NullReferenceException">Thrown if str is null.</exception>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.RightAfter(System.String,System.String)">
            <summary>
            Returns a string containing every character within a string after the 
            first occurrence of another string.
            </summary>
            <param name="str">Required. String expression from which the rightmost characters are returned.</param>
            <param name="searchString">The string where the end of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.RightAfter(System.String,System.String,System.Boolean)">
            <summary>
            Returns a string containing every character within a string after the 
            first occurrence of another string.
            </summary>
            <param name="str">Required. String expression from which the rightmost characters are returned.</param>
            <param name="searchString">The string where the end of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <param name="caseSensitive">Default true: If true, uses case sensitive search.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.LeftBefore(System.String,System.String)">
            <summary>
            Returns a string containing every character within a string before the 
            first occurrence of another string.
            </summary>
            <param name="str">Required. String expression from which the leftmost characters are returned.</param>
            <param name="searchString">The string where the beginning of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.LeftBefore(System.String,System.String,System.Boolean)">
            <summary>
            Returns a string containing every character within a string before the 
            first occurrence of another string.
            </summary>
            <param name="str">Required. String expression from which the leftmost characters are returned.</param>
            <param name="searchString">The string where the beginning of it marks the 
            characters to return.  If the string is not found, the whole string is 
            returned.</param>
            <param name="caseSensitive">Default true: If true, uses case sensitive search.</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the specified string to be searched starts with 
            the specified prefix in a culturally invariant manner.
            </summary>
            <param name="searched">The string to check its start.</param>
            <param name="prefix">The string to search for at the beginning of the searched string.</param>
            <param name="ignoreCase">Ignore case.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Text.StringHelper.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the specified string to be searched ends with 
            the specified prefix in a culturally invariant manner.
            </summary>
            <param name="searched">The string to check its end.</param>
            <param name="suffix">The string to search for at the end of the searched string.</param>
            <param name="ignoreCase">Ignore case.</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Threading.TimedLock">
            <summary>
            Class provides a nice way of obtaining a lock that will time out 
            with a cleaner syntax than using the whole Monitor.TryEnter() method.
            </summary>
            <remarks>
            Adapted from Ian Griffiths article http://www.interact-sw.co.uk/iangblog/2004/03/23/locking 
            and incorporating suggestions by Marek Malowidzki as outlined in this blog post 
            http://www.interact-sw.co.uk/iangblog/2004/05/12/timedlockstacktrace
            </remarks>
            <example>
            Instead of:
            <code>
            lock(obj)
            {
            	//Thread safe operation
            }
            
            do this:
            
            using(TimedLock.Lock(obj))
            {
            	//Thread safe operations
            }
            
            or this:
            
            try
            {
            	TimedLock timeLock = TimedLock.Lock(obj);
            	//Thread safe operations
            	timeLock.Dispose();
            }
            catch(LockTimeoutException e)
            {
            	Console.WriteLine("Couldn't get a lock!");
            	StackTrace otherStack = e.GetBlockingThreadStackTrace(5000);
            	if(otherStack == null)
            	{
            		Console.WriteLine("Couldn't get other stack!");
            	}
            	else
            	{
            		Console.WriteLine("Stack trace of thread that owns lock!");
            	}
            	
            }
            </code>
            </example>
        </member>
        <member name="M:Subtext.Framework.Threading.TimedLock.Lock(System.Object)">
            <summary>
            Attempts to obtain a lock on the specified object for up 
            to 10 seconds.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Threading.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            Attempts to obtain a lock on the specified object for up to 
            the specified timeout.
            </summary>
            <param name="o"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Threading.TimedLock.Dispose">
            <summary>
            Disposes of this lock.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Threading.LockTimeoutException">
            <summary>
            Thrown when a lock times out.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.ReportStackTraceIfError(System.Object)">
            <summary>
            Sets the stack trace for the given lock target 
            if an error occurred.
            </summary>
            <param name="lockTarget">Lock target.</param>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Subtext.Framework.Threading.LockTimeoutException"/> instance.
            </summary>
            <remarks>Use this exception.</remarks>
            <param name="lockTarget">Object we tried to lock.</param>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.GetBlockingStackTrace(System.Int32)">
            <summary>
            Stack trace of the thread that holds a lock on the object 
            this lock is attempting to acquire when it fails.
            </summary>
            <param name="timeout">Number of milliseconds to wait for the blocking stack trace.</param>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.#ctor">
            <summary>
            Creates a new <see cref="T:Subtext.Framework.Threading.LockTimeoutException"/> instance.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Subtext.Framework.Threading.LockTimeoutException.ToString">
            <summary>
            Returns a string representation of the exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Threading.UndisposedLockException">
            <summary>
            This exception indicates that a user of the TimedLock struct 
            failed to leave a Monitor.  This could be the result of a 
            deadlock or forgetting to use the using statement or a try 
            finally block.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Threading.UndisposedLockException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Subtext.Framework.Threading.UndisposedLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor used for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Subtext.Framework.Threading.UndisposedLockException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the ISerializable interface.  This method is used 
            to serialize this class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Subtext.Framework.Tracking.AggBugHandler">
            <summary>
            Summary description for AggBugHandler.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.EntryTracker">
            <summary>
            Summary description for TrackEntry.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.NotificationServices">
            <summary>
            Summary description for Notification.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.PingBackNotificatinProxy">
            <summary>
            Summary description for WeblogsNotificatinProxy.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.PingBackService">
            <summary>
            Summary description for PingBackService.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.TrackBackHandler">
            <summary>
            Summary description for TrackBackHandler.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.TrackBackNotificationProxy">
            <summary>
            Summary description for TrackBackNotificationProxy.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.TrackHelpers">
            <summary>
            Summary description for TrackHelpers.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.TrackingUrls">
            <summary>
            Summary description for TrackingUrls.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.Verifier">
            <summary>
            Summary description for Verifier.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Tracking.WeblogsNotificatinProxy">
            <summary>
            Summary description for WeblogsNotificatinProxy.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Util.BlogCache">
            <summary>
            Allows caching in application in applications hosted inside and out of IIS
            </summary>
        </member>
        <member name="T:Subtext.Framework.Util.BlogTime">
            <summary>
            Class used to convert server time to blogger time and back.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Util.BlogTime.ConvertToBloggerTime(System.DateTime,System.Int32)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> to 
            the blogger's time zone.
            </summary>
            <param name="dt">Dt.</param>
            <param name="ClientTimeZone">Client time zone.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Util.BlogTime.ConvertToServerTime(System.DateTime,System.Int32)">
            <summary>
            Converts the specified <see cref="T:System.DateTime"/> ot the server's time zone.
            </summary>
            <param name="dt">Dt.</param>
            <param name="ClientTimeZone">Client time zone.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Util.BlogTime.FromClientToServerFactor(System.Int32,System.Int32)">
            <summary>
            Gets the client to server factor.
            </summary>
            <param name="Client">Client.</param>
            <param name="Server">Server.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Util.BlogTime.FromServerToClientFactor(System.Int32,System.Int32)">
            <summary>
            Gets the server to client factor.
            </summary>
            <param name="Client">Client.</param>
            <param name="Server">Server.</param>
            <returns></returns>
        </member>
        <member name="P:Subtext.Framework.Util.BlogTime.CurrentBloggerTime">
            <summary>
            Gets the current blogger time.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Util.BlogTime.ClientToServerTimeZoneFactor">
            <summary>
            Gets the client to server time zone factor.
            </summary>
            <value></value>
        </member>
        <member name="P:Subtext.Framework.Util.BlogTime.ServerToClientTimeZoneFactor">
            <summary>
            Gets the server to client time zone factor.
            </summary>
            <value></value>
        </member>
        <member name="T:Subtext.Framework.Util.Globals">
            <summary>
            Static methods with nowhere to go.  Let's get rid of this.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Util.KeyWords.ReplaceFormat(System.String,System.String,System.String)">
            <summary>
            Preforms a forward scan and replace for a given pattern. Replaces all finds and preforms a case sensitive search
            </summary>
            <param name="source">Text to search</param>
            <param name="oldValue">Pattern to search for</param>
            <param name="formatString">Replaced Pattern</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Util.KeyWords.ReplaceFormat(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Preforms a forward scan and replace for a given pattern. Can specify only to match first fine and if the pattern is CaseSensitive
            </summary>
            <param name="source">Text to search</param>
            <param name="oldValue">Pattern to search for</param>
            <param name="formatString">Replaced Pattern</param>
            <param name="onlyFirstMatch">Match First Only</param>
            <param name="CaseSensitive">Is CaseSensitive</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Util.Semaphore">
            <summary>Implementation of Dijkstra's PV Semaphore based on the Monitor class.</summary>
        </member>
        <member name="F:Subtext.Framework.Util.Semaphore._count">
            <summary>The number of units alloted by this semaphore.</summary>
        </member>
        <member name="M:Subtext.Framework.Util.Semaphore.#ctor">
            <summary> Initialize the semaphore as a binary semaphore.</summary>
        </member>
        <member name="M:Subtext.Framework.Util.Semaphore.#ctor(System.Int32)">
            <summary> Initialize the semaphore as a counting semaphore.</summary>
            <param name="count">Initial number of threads that can take out units from this semaphore.</param>
            <exception cref="T:System.ArgumentException">Throws if the count argument is less than 1.</exception>
        </member>
        <member name="M:Subtext.Framework.Util.Semaphore.AddOne">
            <summary>V the semaphore (add 1 unit to it).</summary>
        </member>
        <member name="M:Subtext.Framework.Util.Semaphore.WaitOne">
            <summary>P the semaphore (take out 1 unit from it).</summary>
        </member>
        <member name="M:Subtext.Framework.Util.Semaphore.P">
            <summary>P the semaphore (take out 1 unit from it).</summary>
        </member>
        <member name="M:Subtext.Framework.Util.Semaphore.V">
            <summary>V the semaphore (add 1 unit to it).</summary>
        </member>
        <member name="M:Subtext.Framework.Util.Semaphore.Reset(System.Int32)">
            <summary>Resets the semaphore to the specified count.  Should be used cautiously.</summary>
        </member>
        <member name="T:Subtext.Framework.Util.ManagedThreadPool">
            <summary>Managed thread pool.</summary>
        </member>
        <member name="F:Subtext.Framework.Util.ManagedThreadPool._maxWorkerThreads">
            <summary>Maximum number of threads the thread pool has at its disposal.</summary>
        </member>
        <member name="F:Subtext.Framework.Util.ManagedThreadPool._waitingCallbacks">
            <summary>Queue of all the callbacks waiting to be executed.</summary>
        </member>
        <member name="F:Subtext.Framework.Util.ManagedThreadPool._workerThreadNeeded">
            <summary>
            Used to signal that a worker thread is needed for processing.  Note that multiple
            threads may be needed simultaneously and as such we use a semaphore instead of
            an auto reset event.
            </summary>
        </member>
        <member name="F:Subtext.Framework.Util.ManagedThreadPool._workerThreads">
            <summary>List of all worker threads at the disposal of the thread pool.</summary>
        </member>
        <member name="F:Subtext.Framework.Util.ManagedThreadPool._inUseThreads">
            <summary>Number of threads currently active.</summary>
        </member>
        <member name="M:Subtext.Framework.Util.ManagedThreadPool.#cctor">
            <summary>Initialize the thread pool.</summary>
        </member>
        <member name="M:Subtext.Framework.Util.ManagedThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
        </member>
        <member name="M:Subtext.Framework.Util.ManagedThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
            <param name="state">
            The object that is passed to the delegate when serviced from the thread pool.
            </param>
        </member>
        <member name="M:Subtext.Framework.Util.ManagedThreadPool.EmptyQueue">
            <summary>Empties the work queue of any queued work items.</summary>
        </member>
        <member name="M:Subtext.Framework.Util.ManagedThreadPool.ProcessQueuedItems">
            <summary>A thread worker function that processes items from the work queue.</summary>
        </member>
        <member name="P:Subtext.Framework.Util.ManagedThreadPool.MaxThreads">
            <summary>Gets the number of threads at the disposal of the thread pool.</summary>
        </member>
        <member name="P:Subtext.Framework.Util.ManagedThreadPool.ActiveThreads">
            <summary>Gets the number of currently active threads in the thread pool.</summary>
        </member>
        <member name="P:Subtext.Framework.Util.ManagedThreadPool.WaitingCallbacks">
            <summary>Gets the number of callback delegates currently waiting in the thread pool.</summary>
        </member>
        <member name="T:Subtext.Framework.Util.ManagedThreadPool.WaitingCallback">
            <summary>Used to hold a callback delegate and the state for that delegate.</summary>
        </member>
        <member name="F:Subtext.Framework.Util.ManagedThreadPool.WaitingCallback._callback">
            <summary>Callback delegate for the callback.</summary>
        </member>
        <member name="F:Subtext.Framework.Util.ManagedThreadPool.WaitingCallback._state">
            <summary>State with which to call the callback delegate.</summary>
        </member>
        <member name="M:Subtext.Framework.Util.ManagedThreadPool.WaitingCallback.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>Initialize the callback holding object.</summary>
            <param name="callback">Callback delegate for the callback.</param>
            <param name="state">State with which to call the callback delegate.</param>
        </member>
        <member name="P:Subtext.Framework.Util.ManagedThreadPool.WaitingCallback.Callback">
            <summary>Gets the callback delegate for the callback.</summary>
        </member>
        <member name="P:Subtext.Framework.Util.ManagedThreadPool.WaitingCallback.State">
            <summary>Gets the state with which to call the callback delegate.</summary>
        </member>
        <member name="T:Subtext.Framework.Util.SerializationHelper">
            <summary>
            Class with methods for saving and loading objects as 
            serialized instances.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Util.SerializationHelper.Load(System.Type,System.String)">
            <summary>
            Loads the specified type.
            </summary>
            <param name="type">Type.</param>
            <param name="filename">Filename.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Util.SerializationHelper.Save(System.Object,System.String)">
            <summary>
            Saves the specified object at the specified location 
            as a serialized file.
            </summary>
            <param name="obj">Obj.</param>
            <param name="filename">Filename.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Subtext.Framework.Util.Transform" -->
        <member name="T:Subtext.Framework.Util.WebPathStripper">
            <summary>
            Summary description for WebPathStripper.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Util.WebPathStripper.GetCategryFromRss(System.String)">
            <summary>
            Return the value of a url between /category/ and /rss
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Util.WebPathStripper.RemoveRssSlash(System.String)">
            <summary>
            Removes the trailing RSS slash if there.
            </summary>
            <param name="url">URL.</param>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.XmlRpc.MetaWeblog">
            <summary>
            Summary description for MetaWeblog.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Archives">
            <summary>
            Static class used to get collections of archived posts 
            (by month and year) from the data provider.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Archives.GetPostsByMonthArchive">
            <summary>
            Gets archived posts by month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Archives.GetPostsByYearArchive">
            <summary>
            Gets archived posts by year.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Subtext.Framework.Entries">
            <summary>
            Summary description for Entries.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Entries.GetPagedEntries(Subtext.Framework.Components.PostType,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a collection of Posts for a give page and index size.
            </summary>
            <param name="postType"></param>
            <param name="categoryID">-1 means not to filter by a categoryID</param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="sortDescending"></param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Entries.GetRecentDayPosts(System.Int32,System.Boolean)">
            <summary>
            Returns a collection of Entries grouped by Day
            </summary>
            <param name="ItemCount">Number of entries total</param>
            <param name="ActiveOnly">Return only Active Posts</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Entries.GetFeedBack(System.Int32)">
            <summary>
            Returns a collection of Entries containing the feedback for a given post (via ParentID)
            </summary>
            <param name="ParentId">Parent (EntryID) of the collection</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Entries.Update(Subtext.Framework.Components.Entry)">
            <summary>
            Updates the specified entry in the data provider.
            </summary>
            <param name="entry">Entry.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Entries.Update(Subtext.Framework.Components.Entry,System.Int32[])">
            <summary>
            Updates the specified entry in the data provider 
            and attaches the specified categories.
            </summary>
            <param name="entry">Entry.</param>
            <param name="CategoryIDs">Category Ids this entry belongs to.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Entries.InsertComment(Subtext.Framework.Components.Entry)">
            <summary>
            Inserts a comment for the specified entry.
            </summary>
            <remarks>
            If it's not the admin posting the comment, an email is sent 
            to the Admin with the contents of the comment.
            </remarks>
            <param name="entry">Entry.</param>
        </member>
        <member name="T:Subtext.Framework.BlogDoesNotExistException">
            <summary>
            Exception thrown when a blog does not exist.  This is 
            indicative of not having created a blog_config record.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Links">
            <summary>
            Summary description for Links.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Security">
            <summary>
            Handles blog logins/passwords/tickets
            </summary>
        </member>
        <member name="M:Subtext.Framework.Security.Authenticate(System.String,System.String)">
            <summary>
            Check to see if the supplied credentials are valid for the current blog. 
            If so, Set the user's FormsAuthentication Ticket This method will handle 
            passwords for both hashed and non-hashed configurations
            </summary>
            <param name="username">Supplied UserName</param>
            <param name="password">Supplied Password</param>
            <returns>bool indicating successful login</returns>
        </member>
        <member name="M:Subtext.Framework.Security.Authenticate(System.String,System.String,System.Boolean)">
            <summary>
            Check to see if the supplied credentials are valid for the current blog. If so, 
            Set the user's FormsAuthentication Ticket This method will handle passwords for 
            both hashed and non-hashed configurations
            </summary>
            <param name="username">Supplied UserName</param>
            <param name="password">Supplied Password</param>
            <param name="persist">If valid, should we persist the login</param>
            <returns>bool indicating successful login</returns>
        </member>
        <member name="M:Subtext.Framework.Security.SetTicket(System.String,System.Boolean)">
            <summary>
            Private method to set FormsAuthentication Ticket. 
            </summary>
            <param name="username">Username for the ticket</param>
            <param name="persist">Should this ticket be persisted</param>
        </member>
        <member name="M:Subtext.Framework.Security.HashPassword(System.String)">
            <summary>
            Get MD5 hashed/encrypted representation of the password and 
            returns a Base64 encoded string of the hash.
            This is a one-way hash.
            </summary>
            <remarks>
            Passwords are case sensitive now. Before they weren't.
            </remarks>
            <param name="password">Supplied Password</param>
            <returns>Encrypted (Hashed) value</returns>
        </member>
        <member name="M:Subtext.Framework.Security.IsValidUser(System.String,System.String)">
            <summary>
            Validates if the supplied credentials match the current blog
            </summary>
            <param name="username">Supplied Username</param>
            <param name="password">Supplied Password</param>
            <returns>bool value indicating if the user is valid.</returns>
        </member>
        <member name="M:Subtext.Framework.Security.IsValidPassword(System.String)">
            <summary>
            Check to see if the supplied password matches the password 
            for the current blog. This method will check the 
            BlogConfigurationSettings to see if the password should be 
            Encrypted/Hashed
            </summary>
            <param name="password">Supplied Password</param>
            <returns>bool value indicating if the supplied password matches the current blog's password</returns>
        </member>
        <member name="M:Subtext.Framework.Security.ResetPassword">
            <summary>
            When we Encrypt/Hash the password, we can not un-Encrypt/Hash the password. If user's need to retrieve this value, all we can
            do is reset the passowrd to a new value and send it.
            </summary>
            <returns>A New Password</returns>
        </member>
        <member name="M:Subtext.Framework.Security.UpdatePassword(System.String)">
            <summary>
            Updates the current users password to the supplied value. Handles hashing (or not hashing of the password)
            </summary>
            <param name="password">Supplied Password</param>
        </member>
        <member name="M:Subtext.Framework.Security.RandomPassword">
            <summary>
            Generates a "Random Enough" password. :)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Subtext.Framework.Security.UserIsConnectingLocally">
            <summary>
            If true, then the user is connecting to the blog via "localhost" 
            on the same server as this is installed.  In other words, we're 
            pretty sure the user is a developer.
            </summary>
        </member>
        <member name="T:Subtext.Framework.Stats">
            <summary>
            Class used for managing stats. Provides facilities for queing stats. 
            This is used for trackbacks and pingbacks.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Stats.#cctor">
            <summary>
            Static Constructor.
            </summary>
        </member>
        <member name="M:Subtext.Framework.Stats.ClearQueue(System.Boolean)">
            <summary>
            Clears the queue of statistics.  If save is specified, then 
            stats are saved to an <see cref="T:Subtext.Framework.Components.EntryView"/>
            </summary>
            <param name="save">Save.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Stats.AddQuedStats(Subtext.Framework.Components.EntryView)">
            <summary>
            Adds <see cref="T:Subtext.Framework.Components.EntryView"/> instance to the stats queue.
            </summary>
            <param name="ev">Ev.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Stats.TrackEntry(Subtext.Framework.Components.EntryView)">
            <summary>
            Calls out to the data provider to track the specified 
            <see cref="T:Subtext.Framework.Components.EntryView"/> instance.
            </summary>
            <param name="ev">Ev.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Stats.TrackEntry(Subtext.Framework.Components.EntryViewCollection)">
            <summary>
            Calls out to the data provider to track the specified 
            <see cref="T:Subtext.Framework.Components.EntryViewCollection"/> instance.
            </summary>
            <param name="evc">Evc.</param>
            <returns></returns>
        </member>
        <member name="M:Subtext.Framework.Stats.Notify(Subtext.Framework.Components.Entry)">
            <summary>
            Performs the notification, wether it be a pingback or trackback.
            </summary>
            <param name="entry">Entry.</param>
        </member>
        <member name="T:Subtext.Framework.VersionInfo">
            <summary>
            Summary description for VersionInfo.
            </summary>
        </member>
    </members>
</doc>
