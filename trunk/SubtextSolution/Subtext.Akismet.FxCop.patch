Index: AkismetClient.cs
===================================================================
--- AkismetClient.cs	(revision 2079)
+++ AkismetClient.cs	(working copy)
@@ -2,6 +2,7 @@
 using System.Globalization;
 using System.Net;
 using System.Web;
+using Subtext.Akismet.Properties;
 
 namespace Subtext.Akismet
 {
@@ -39,13 +40,13 @@
 		public AkismetClient(string apiKey, Uri blogUrl, HttpClient httpClient)
 		{
 			if(apiKey == null)
-				throw new ArgumentNullException("apiKey", "The akismet Api Key must be specified");
+				throw new ArgumentNullException("apiKey", Resources.ArgumentNull_String);
 
 			if (blogUrl == null)
-				throw new ArgumentNullException("blogUrl", "The blog's url must be specified");
+				throw new ArgumentNullException("blogUrl", Resources.ArgumentNull_Uri);
 			
 			if (httpClient == null)
-				throw new ArgumentNullException("httpClient", "Must supply an http client");
+				throw new ArgumentNullException("httpClient", Resources.ArgumentNull_Generic);
 			
 			this.apiKey = apiKey;
 			this.blogUrl = blogUrl;
Index: HttpClient.cs
===================================================================
--- HttpClient.cs	(revision 2079)
+++ HttpClient.cs	(working copy)
@@ -3,6 +3,7 @@
 using System.IO;
 using System.Net;
 using System.Text;
+using Subtext.Akismet.Properties;
 
 namespace Subtext.Akismet
 {
@@ -42,7 +43,7 @@
 		public virtual string PostRequest(Uri url, string userAgent, int timeout, string formParameters, IWebProxy proxy)
 		{
 			if (formParameters == null)
-				throw new ArgumentNullException("formParameters", "Cannot post a null form.");
+				throw new ArgumentNullException("formParameters", Resources.ArgumentNull_String);
 			
 			System.Net.ServicePointManager.Expect100Continue = false;
 			HttpWebRequest request = WebRequest.Create(url) as HttpWebRequest;
@@ -67,7 +68,7 @@
 
 			HttpWebResponse response = (HttpWebResponse)request.GetResponse();
 			if (response.StatusCode < HttpStatusCode.OK && response.StatusCode >= HttpStatusCode.Ambiguous)
-				throw new InvalidResponseException(string.Format(CultureInfo.InvariantCulture, "The service was not able to handle our request. Http Status '{0}'.", response.StatusCode), response.StatusCode);
+				throw new InvalidResponseException(string.Format(CultureInfo.InvariantCulture, Resources.InvalidResponse_Generic, response.StatusCode), response.StatusCode);
 
 			string responseText;
 			using(StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.ASCII)) //They only return "true" or "false"
Index: Properties/GlobalSuppressions.cs
===================================================================
--- Properties/GlobalSuppressions.cs	(revision 0)
+++ Properties/GlobalSuppressions.cs	(revision 0)
@@ -0,0 +1,23 @@
+// ---------------------------------------------------------------------------
+// GlobalSuppressions.cs
+//
+// Provides assembly level (global) CodeAnalysis suppressions for FxCop.
+//
+// While static code analysis with FxCop is excellent for catching many common
+// and not so common code errors, there are some things that it flags that
+// do not always apply to the project at hand. For those cases, FxCop allows
+// you to exclude the message (and optionally give a justification reason for
+// excluding it). However, those exclusions are stored only in the FxCop
+// project file. In the 2.0 version of the .NET framework, Microsoft introduced
+// SuppressMessageAttribute, which is used primarily by the version of FxCop
+// that is built in to Visual Studio. As this built-in functionality is not
+// included in all versions of Visual Studio, we have opted to continue
+// using the standalone version of FxCop. 
+//
+// In order for this version to recognize SupressMessageAttribute, the
+// CODE_ANALYSIS symbol must be defined.
+//
+// ---------------------------------------------------------------------------
+using System.Diagnostics.CodeAnalysis;
+
+[assembly: SuppressMessage("Microsoft.Design", "CA2210:AssembliesShouldHaveValidStrongNames", Scope = "assembly", Justification = "Assemblies are not currently being signed.")]
Index: Properties/Resources.Designer.cs
===================================================================
--- Properties/Resources.Designer.cs	(revision 0)
+++ Properties/Resources.Designer.cs	(revision 0)
@@ -0,0 +1,270 @@
+//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:2.0.50727.42
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace Subtext.Akismet.Properties {
+    using System;
+    
+    
+    /// <summary>
+    ///   A strongly-typed resource class, for looking up localized strings, etc.
+    /// </summary>
+    // This class was auto-generated by the StronglyTypedResourceBuilder
+    // class via a tool like ResGen or Visual Studio.
+    // To add or remove a member, edit your .ResX file then rerun ResGen
+    // with the /str option, or rebuild your VS project.
+    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
+    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+    internal class Resources {
+        
+        private static global::System.Resources.ResourceManager resourceMan;
+        
+        private static global::System.Globalization.CultureInfo resourceCulture;
+        
+        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
+        internal Resources() {
+        }
+        
+        /// <summary>
+        ///   Returns the cached ResourceManager instance used by this class.
+        /// </summary>
+        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+        internal static global::System.Resources.ResourceManager ResourceManager {
+            get {
+                if (object.ReferenceEquals(resourceMan, null)) {
+                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Subtext.Akismet.Properties.Resources", typeof(Resources).Assembly);
+                    resourceMan = temp;
+                }
+                return resourceMan;
+            }
+        }
+        
+        /// <summary>
+        ///   Overrides the current thread's CurrentUICulture property for all
+        ///   resource lookups using this strongly typed resource class.
+        /// </summary>
+        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+        internal static global::System.Globalization.CultureInfo Culture {
+            get {
+                return resourceCulture;
+            }
+            set {
+                resourceCulture = value;
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Array cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Array {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Array", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to At least one element in the specified array was null..
+        /// </summary>
+        internal static string ArgumentNull_ArrayElement {
+            get {
+                return ResourceManager.GetString("ArgumentNull_ArrayElement", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Found a null value within an array..
+        /// </summary>
+        internal static string ArgumentNull_ArrayValue {
+            get {
+                return ResourceManager.GetString("ArgumentNull_ArrayValue", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Assembly cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Assembly {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Assembly", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to AssemblyName cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_AssemblyName {
+            get {
+                return ResourceManager.GetString("ArgumentNull_AssemblyName", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to AssemblyName.Name cannot be null or an empty string..
+        /// </summary>
+        internal static string ArgumentNull_AssemblyNameName {
+            get {
+                return ResourceManager.GetString("ArgumentNull_AssemblyNameName", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Buffer cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Buffer {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Buffer", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Collection cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Collection {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Collection", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Dictionary cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Dictionary {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Dictionary", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to File name cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_FileName {
+            get {
+                return ResourceManager.GetString("ArgumentNull_FileName", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Value cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Generic {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Generic", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Object Graph cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Graph {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Graph", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to GUID cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_GUID {
+            get {
+                return ResourceManager.GetString("ArgumentNull_GUID", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Key cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Key {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Key", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Member at position {0} was null..
+        /// </summary>
+        internal static string ArgumentNull_NullMember {
+            get {
+                return ResourceManager.GetString("ArgumentNull_NullMember", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Object cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Obj {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Obj", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Path cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Path {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Path", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Stream cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Stream {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Stream", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to String reference not set to an instance of a String..
+        /// </summary>
+        internal static string ArgumentNull_String {
+            get {
+                return ResourceManager.GetString("ArgumentNull_String", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Type cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Type {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Type", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to URI cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_Uri {
+            get {
+                return ResourceManager.GetString("ArgumentNull_Uri", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; cannot be null..
+        /// </summary>
+        internal static string ArgumentNull_WithParamName {
+            get {
+                return ResourceManager.GetString("ArgumentNull_WithParamName", resourceCulture);
+            }
+        }
+        
+        /// <summary>
+        ///   Looks up a localized string similar to The service was not able to handle our request. Http Status &apos;{0}&apos;..
+        /// </summary>
+        internal static string InvalidResponse_Generic {
+            get {
+                return ResourceManager.GetString("InvalidResponse_Generic", resourceCulture);
+            }
+        }
+    }
+}
Index: Properties/Resources.resx
===================================================================
--- Properties/Resources.resx	(revision 0)
+++ Properties/Resources.resx	(revision 0)
@@ -0,0 +1,189 @@
+<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" use="required" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <data name="InvalidResponse_Generic" xml:space="preserve">
+    <value>The service was not able to handle our request. Http Status '{0}'.</value>
+  </data>
+  <data name="ArgumentNull_Array" xml:space="preserve">
+    <value>Array cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_ArrayElement" xml:space="preserve">
+    <value>At least one element in the specified array was null.</value>
+  </data>
+  <data name="ArgumentNull_ArrayValue" xml:space="preserve">
+    <value>Found a null value within an array.</value>
+  </data>
+  <data name="ArgumentNull_Assembly" xml:space="preserve">
+    <value>Assembly cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_AssemblyName" xml:space="preserve">
+    <value>AssemblyName cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_AssemblyNameName" xml:space="preserve">
+    <value>AssemblyName.Name cannot be null or an empty string.</value>
+  </data>
+  <data name="ArgumentNull_Buffer" xml:space="preserve">
+    <value>Buffer cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Collection" xml:space="preserve">
+    <value>Collection cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Dictionary" xml:space="preserve">
+    <value>Dictionary cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_FileName" xml:space="preserve">
+    <value>File name cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Generic" xml:space="preserve">
+    <value>Value cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Graph" xml:space="preserve">
+    <value>Object Graph cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_GUID" xml:space="preserve">
+    <value>GUID cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Key" xml:space="preserve">
+    <value>Key cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_NullMember" xml:space="preserve">
+    <value>Member at position {0} was null.</value>
+  </data>
+  <data name="ArgumentNull_Obj" xml:space="preserve">
+    <value>Object cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Path" xml:space="preserve">
+    <value>Path cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Stream" xml:space="preserve">
+    <value>Stream cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_String" xml:space="preserve">
+    <value>String reference not set to an instance of a String.</value>
+  </data>
+  <data name="ArgumentNull_Type" xml:space="preserve">
+    <value>Type cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_Uri" xml:space="preserve">
+    <value>URI cannot be null.</value>
+  </data>
+  <data name="ArgumentNull_WithParamName" xml:space="preserve">
+    <value>Parameter '{0}' cannot be null.</value>
+  </data>
+</root>
Index: Subtext.Akismet.csproj
===================================================================
--- Subtext.Akismet.csproj	(revision 2079)
+++ Subtext.Akismet.csproj	(working copy)
@@ -1,4 +1,4 @@
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
@@ -18,7 +18,7 @@
     <DebugType>full</DebugType>
     <Optimize>false</Optimize>
     <OutputPath>bin\Debug\</OutputPath>
-    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <DefineConstants>TRACE;DEBUG;CODE_ANALYSIS</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
@@ -68,7 +68,20 @@
     <Compile Include="IComment.cs" />
     <Compile Include="InvalidResponseException.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="Properties\GlobalSuppressions.cs" />
+    <Compile Include="Properties\Resources.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DesignTime>True</DesignTime>
+      <DependentUpon>Resources.resx</DependentUpon>
+    </Compile>
   </ItemGroup>
+  <ItemGroup>
+    <EmbeddedResource Include="Properties\Resources.resx">
+      <SubType>Designer</SubType>
+      <Generator>ResXFileCodeGenerator</Generator>
+      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+    </EmbeddedResource>
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
@@ -77,4 +90,4 @@
   <Target Name="AfterBuild">
   </Target>
   -->
-</Project>
\ No newline at end of file
+</Project>

 	  	 
